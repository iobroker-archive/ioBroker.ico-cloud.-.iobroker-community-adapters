{
  "version": 3,
  "sources": ["../../src/lib/api.ts"],
  "sourcesContent": ["import axios, { type AxiosError, type Method } from 'axios';\nimport { URLSearchParams } from 'node:url';\n\n// Headers:\n// Accept: application/json\n// Accept-Charset: utf-8\n// Accept-Encoding : gzip-deflate\n// Content-type: application/json\n\n//how to limit this?\n//maximum 5 requests per second\n//maximum 30 requests per hour\n//api says that measurements are taken every hour (?)\n\nconst baseURL = 'https://interop.ondilo.com/';\nconst tokenURL = `${baseURL}oauth2/token`;\nconst client_id = 'customer_api';\nconst apiPrefix = `${baseURL}api/customer/v1/`;\nconst authorizeBaseUrl = `${baseURL}oauth2/authorize`;\n\n/**\n * Pool Configuration\n */\nexport interface Configuration {\n    /**\n     * Temperature low\n     */\n    temperature_low: number;\n    /**\n     * Temperature high\n     */\n    temperature_high: number;\n    /**\n     * pH low\n     */\n    ph_low: number;\n    /**\n     * pH high\n     */\n    ph_high: number;\n    /**\n     * ORP low\n     */\n    orp_low: number;\n    /**\n     * ORP high\n     */\n    orp_high: number;\n    /**\n     * Salt low\n     */\n    salt_low: number;\n    /**\n     * Salt high\n     */\n    salt_high: number;\n    /**\n     * TDS low\n     */\n    tds_low: number;\n    /**\n     * TDS high\n     */\n    tds_high: number;\n    /**\n     * pool guy number\n     */\n    pool_guy_number: string;\n    /**\n     * what day maintenance is done\n     */\n    maintenance_day: number;\n}\n\nexport type PossibleTypes = 'temperature' | 'ph' | 'orp' | 'salt' | 'tds' | 'battery' | 'rssi';\n\n// always the following units:\n// Temperature: Celsius degrees (\u00B0C)\n// ORP: millivolts (mV)\n// Salt: milligrams per liter (mg/L)\n// TDS: parts per million (ppm)\n// Battery and RSSI: percent (%)\n/**\n * Measurement\n */\nexport interface Measure {\n    /**\n     * data type of measurement\n     */\n    data_type: PossibleTypes;\n    /**\n     * value of measurement\n     */\n    value: number;\n    /**\n     * time of measurement\n     */\n    value_time: Date;\n    /**\n     * was measurement valid?\n     */\n    is_valid: boolean;\n    /**\n     * why did we not measure this\n     */\n    exclusion_reason: string | null;\n}\n\n/**\n * Recommendation\n */\nexport interface Recommendation {\n    /**\n     * id of recommendation\n     */\n    id: number;\n    /**\n     * Title of recommendation\n     */\n    title: string;\n    /**\n     * Description of recommendation\n     */\n    message: string;\n    /**\n     * Creation date of recommendation\n     */\n    created_at: Date;\n    /**\n     * Update date of recommendation\n     */\n    updated_at: Date;\n    /**\n     * Status of recommendation\n     */\n    status: 'waiting'; //not sure what else..?\n    /**\n     * Deadline of recommendation\n     */\n    deadline: Date;\n}\n\n/**\n * Class to communicate with Ondilo API\n */\nexport class Api {\n    private accessToken: string;\n    private refreshToken: string;\n    private log: ioBroker.Logger;\n\n    /**\n     * Constructor\n     *\n     * @param options - options for the API\n     * @param options.refreshToken - refresh token\n     * @param options.accessToken - access token\n     * @param options.log - logger\n     */\n    public constructor(options: { refreshToken: string; accessToken: string; log: ioBroker.Logger }) {\n        this.accessToken = options.accessToken;\n        this.refreshToken = options.refreshToken;\n        this.log = options.log;\n    }\n\n    private async doRefreshToken(): Promise<boolean> {\n        try {\n            const response = await axios.post(\n                tokenURL,\n                new URLSearchParams({\n                    refresh_token: this.refreshToken,\n                    grant_type: 'refresh_token',\n                    client_id,\n                }).toString(),\n                {\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                    },\n                },\n            );\n\n            if (response.status === 200) {\n                if (response.data && response.data.access_token) {\n                    this.accessToken = response.data.access_token;\n                    return true;\n                }\n                throw new Error(`No toke in response. ${JSON.stringify(response.data)}`);\n            } else {\n                throw new Error(`${response.status} - ${JSON.stringify(response.data)}`);\n            }\n        } catch (e: any) {\n            if (axios.isAxiosError(e)) {\n                const response = (e as AxiosError).response || { status: 0, data: 'Unknown failure', headers: '' };\n                throw new Error(`Could not update token: ${response.status} - ${JSON.stringify(response.data)}`);\n            } else {\n                this.log.error(`Unexpected error during refresh: ${e}`);\n                throw new Error(`Could not update token: ${e}`);\n            }\n        }\n    }\n\n    private async requestInfo(\n        urlPart: string,\n        method: Method = 'get',\n        triedRefresh = false,\n    ): Promise<Record<string, any> | null | string> {\n        try {\n            const headers: Record<string, string> = {\n                Authorization: `Bearer ${this.accessToken}`,\n                Accept: 'application/json',\n                'Accept-Charset': 'utf-8',\n                'Accept-Encoding': 'gzip, deflate',\n            };\n            if (urlPart.includes('?')) {\n                headers['Content-type'] = 'application/x-www-form-urlencoded';\n            }\n\n            const response = await axios.request({\n                url: apiPrefix + urlPart,\n                method,\n                responseType: method === 'get' ? 'json' : 'text',\n                headers,\n            });\n\n            if (typeof response.data === 'string') {\n                return JSON.parse(response.data);\n            }\n            return response.data;\n        } catch (e: any) {\n            if (axios.isAxiosError(e)) {\n                const response = (e as AxiosError).response || { status: 0, data: 'Unknown failure', headers: '' };\n                if (response.status === 401 && !triedRefresh) {\n                    const refreshWorked = await this.doRefreshToken();\n                    if (refreshWorked) {\n                        return this.requestInfo(urlPart, method, true);\n                    }\n                    throw new Error(`Could not update token: ${response.status} - ${JSON.stringify(response.data)}`);\n                } else {\n                    throw new Error(\n                        `API Error ${response.status} while getting ${urlPart}: ${JSON.stringify(response.data)} - headers: ${JSON.stringify(response.headers)}`,\n                    );\n                }\n            } else {\n                throw new Error(`Unexpected error getting ${urlPart}: ${e.stack}`);\n            }\n        }\n    }\n\n    /**\n     * Create login url from redirect url and state variable. Used for oauth.\n     *\n     * @param redirectUrl - redirect url\n     * @param state - state variable\n     * @returns login url\n     */\n    static getLoginUrl(redirectUrl: string, state: string): string {\n        //interop.ondilo.com/oauth2/authorize?client_id=customer_api&scope=api&redirect_uri=http://localhost:8081/oauth2_callbacks/ico-cloud.0/&response_type=code&state=ioBroker.ico-cloud1483502118005.6616\n        return `${authorizeBaseUrl}?client_id=${client_id}&scope=api&response_type=code&redirect_uri=${redirectUrl}&state=${state}`;\n    }\n\n    /**\n     * Get token using code from login.\n     *\n     * @param code - code from login\n     * @param redirectUrl - redirect url used during login\n     * @param log - logger\n     */\n    static async getToken(\n        code: string,\n        redirectUrl: string,\n        log: any,\n    ): Promise<false | { accessToken?: string; refreshToken?: string }> {\n        log.debug('Sending post to get token');\n        const urlPart = tokenURL;\n        try {\n            const result = await axios.post(\n                urlPart,\n                `code=${code}&grant_type=authorization_code&client_id=customer_api&redirect_uri=${redirectUrl}`,\n                {\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                    },\n                    responseType: 'json',\n                },\n            );\n            //log.debug(JSON.stringify(result.data));\n            if (result.status === 200) {\n                if (result.data && result.data.access_token) {\n                    return { accessToken: result.data.access_token, refreshToken: result.data.refresh_token };\n                }\n                log.error(`No token in response. ${JSON.stringify(result.data)}`);\n            } else {\n                log.error(`${result.status} - ${JSON.stringify(result.data)}`);\n            }\n        } catch (e: any) {\n            if (axios.isAxiosError(e)) {\n                const response = (e as AxiosError).response || { status: 0, data: 'Unknown failure', headers: '' };\n                log.error(\n                    `API Error ${response.status} while getting ${urlPart}: ${JSON.stringify(response.data)} - headers: ${JSON.stringify(response.headers)}`,\n                );\n            } else {\n                log.error(`Unexpected error getting ${urlPart}: ${e.stack}`);\n            }\n        }\n        return false;\n    }\n\n    //===========================================================================================================\n    // ========== User stuff:\n    //===========================================================================================================\n    /**\n     * Get user info\n     */\n    async getUser(): Promise<{\n        lastname: string;\n        firstname: string;\n        email: string;\n    }> {\n        const data = await this.requestInfo('user/info');\n        if (typeof data === 'string') {\n            return JSON.parse(data);\n        }\n        return <{ lastname: string; firstname: string; email: string }>data;\n    }\n\n    // will return:\n    //     \"conductivity\": \"MICRO_SIEMENS_PER_CENTI_METER\",\n    //     \"hardness\": \"FRENCH_DEGREE\",\n    //     \"orp\": \"MILLI_VOLT\",\n    //     \"pressure\": \"HECTO_PASCAL\",\n    //     \"salt\": \"GRAM_PER_LITER\",\n    //     \"speed\": \"METER_PER_SECOND\",\n    //     \"temperature\": \"CELSIUS\",\n    //     \"volume\": \"CUBIC_METER\"\n    /**\n     * Get units\n     */\n    async getUnits(): Promise<{\n        conductivity: string;\n        hardness: string;\n        orp: string;\n        pressure: string;\n        salt: string;\n        speed: string;\n        temperature: string;\n        volume: string;\n    }> {\n        const data = await this.requestInfo('user/units');\n        return <\n            {\n                conductivity: string;\n                hardness: string;\n                orp: string;\n                pressure: string;\n                salt: string;\n                speed: string;\n                temperature: string;\n                volume: string;\n            }\n        >data;\n    }\n\n    // Result:\n    // [\n    //     {\n    //         \"id\": 234,\n    //         \"name\": \"John's Pool\",\n    //         \"type\": \"outdoor_inground_pool\",\n    //         \"volume\": 15,\n    //         \"disinfection\": {\n    //             \"primary\": \"chlorine\",\n    //             \"secondary\": {\n    //                 \"uv_sanitizer\": true,\n    //                 \"ozonator\": false\n    //             }\n    //         },\n    //         \"address\": {\n    //             \"street\": \"162 Avenue Robert Schuman\",\n    //             \"zipcode\": \"13760\",\n    //             \"city\": \"Saint-Cannat\",\n    //             \"country\": \"France\",\n    //             \"latitude\": 43.612282,\n    //             \"longitude\": 5.3179397\n    //         },\n    //         \"updated_at\": \"2019-11-27T23:00:21+0000\"\n    //     },\n    //     {\n    //         ...\n    //     }\n    // ]\n    /**\n     * Get all pools\n     */\n    async getPools(): Promise<Array<any>> {\n        const data = await this.requestInfo('pools');\n        console.log(data);\n        return <Array<any>>data;\n    }\n\n    /**\n     * Get pool by id\n     *\n     * @param id of the pool\n     */\n    async getDevice(id: string): Promise<{\n        uuid: string;\n        serial_number: string;\n        sw_version: string;\n    }> {\n        const data = await this.requestInfo(`pools/${id}/device`);\n        console.log(data);\n        return <{ uuid: string; serial_number: string; sw_version: string }>data;\n    }\n\n    /**\n     * Get pool configuration by id\n     *\n     * @param id of the pool\n     */\n    async getConfiguration(id: number): Promise<Configuration> {\n        const data = await this.requestInfo(`pools/${id}/configuration`);\n        return <Configuration>data;\n    }\n\n    //getShares...?\n\n    //===========================================================================================================\n    // ========== Measurements:\n    //===========================================================================================================\n    /**\n     * Get last measures of all types\n     *\n     * @param id of the pool\n     */\n    async getLastMeasures(id: number): Promise<Array<Measure>> {\n        const data = (await this.requestInfo(\n            `pools/${id}/lastmeasures?` +\n                'types[]=temperature&' +\n                'types[]=ph&' +\n                'types[]=orp&' +\n                'types[]=salt&' +\n                'types[]=tds&' +\n                'types[]=battery&' +\n                'types[]=rssi',\n        )) as Array<Measure>;\n        for (const measure of data) {\n            measure.value_time = new Date(measure.value_time);\n        }\n        return data;\n    }\n\n    /**\n     * Get all measures of type for the last day / week / month\n     *\n     * @param id of the pool\n     * @param type type of measurement\n     * @param period period of time\n     */\n    async getMeasures(\n        id: number,\n        type: 'temperature' | 'ph' | 'orp' | 'salt' | 'tds' | 'battery' | 'rssi',\n        period: 'day' | 'week' | 'month',\n    ): Promise<Array<Measure>> {\n        const data = (await this.requestInfo(`pools/${id}/measure?\n            type=${type}&\n            period=${period}`)) as Array<Measure>;\n        for (const measure of data) {\n            measure.value_time = new Date(measure.value_time);\n        }\n        return data;\n    }\n\n    //===========================================================================================================\n    // ========== Recommendations:\n    //===========================================================================================================\n    /**\n     * Get all recommendations for a pool\n     *\n     * @param id of the pool\n     */\n    async getRecommendations(id: number): Promise<Array<Recommendation>> {\n        const data = (await this.requestInfo(`pools/${id}/recommendations`)) as Array<Recommendation>;\n        for (const recommendation of data) {\n            recommendation.created_at = new Date(recommendation.created_at);\n            recommendation.updated_at = new Date(recommendation.updated_at);\n            recommendation.deadline = new Date(recommendation.deadline);\n        }\n        return data;\n    }\n\n    /**\n     * mark a recommendation as done\n     *\n     * @param poolId id of the pool\n     * @param recommendationId id of the recommendation\n     */\n    async validateRecommendation(poolId: number, recommendationId: number): Promise<boolean> {\n        const response = await this.requestInfo(`pools/${poolId}/recommendations/${recommendationId}`, 'put');\n        return ['Done', 'done', 'DONE'].includes(<string>response);\n    }\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
