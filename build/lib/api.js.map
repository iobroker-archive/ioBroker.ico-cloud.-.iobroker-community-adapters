{
  "version": 3,
  "sources": ["../../src/lib/api.ts"],
  "sourcesContent": ["import axios, {AxiosError, Method} from 'axios';\nimport { URLSearchParams } from 'node:url';\n\n// Headers:\n// Accept: application/json\n// Accept-Charset: utf-8\n// Accept-Encoding : gzip-deflate\n// Content-type: application/json\n\n//how to limit this?\n//maximum 5 requests per second\n//maximum 30 requests per hour\n//api says that measurements are taken every hour (?)\n\nconst baseURL = 'https://interop.ondilo.com/';\nconst tokenURL = baseURL + 'oauth2/token';\nconst client_id = 'customer_api';\nconst apiPrefix = baseURL + 'api/customer/v1/';\nconst authorizeBaseUrl = baseURL + 'oauth2/authorize';\n\nexport interface Configuration {\n    temperature_low: number,\n    temperature_high: number,\n    ph_low: number,\n    ph_high: number,\n    orp_low: number,\n    orp_high: number,\n    salt_low: number,\n    salt_high: number,\n    tds_low: number,\n    tds_high: number,\n    pool_guy_number: string,\n    maintenance_day: number\n}\n\nexport type PossibleTypes = 'temperature' | 'ph' | 'orp' | 'salt' | 'tds' | 'battery' | 'rssi';\n\n// always the following units:\n// Temperature: Celsius degrees (\u00B0C)\n// ORP: millivolts (mV)\n// Salt: milligrams per liter (mg/L)\n// TDS: parts per million (ppm)\n// Battery and RSSI: percent (%)\nexport interface Measure {\n    data_type: PossibleTypes,\n    value: number,\n    value_time: Date,\n    is_valid: boolean,\n    exclusion_reason: string | null\n}\n\nexport interface Recommendation {\n    id: number,\n    title: string,\n    message: string,\n    created_at: Date,\n    updated_at: Date,\n    status: string | 'waiting',\n    deadline: Date\n}\n\nexport class Api {\n    private accessToken: string;\n    private refreshToken: string;\n    private log: ioBroker.Logger;\n\n    public constructor(options: { refreshToken: string, accessToken: string, log: ioBroker.Logger}) {\n        this.accessToken = options.accessToken;\n        this.refreshToken = options.refreshToken;\n        this.log = options.log;\n    }\n\n    private async doRefreshToken() : Promise<boolean> {\n        try {\n            const response = await axios.post(tokenURL, new URLSearchParams({\n                refresh_token: this.refreshToken,\n                grant_type: 'refresh_token',\n                client_id\n            }).toString(), {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            });\n\n            if (response.status === 200) {\n                if (response.data && response.data.access_token) {\n                    this.accessToken = response.data.access_token;\n                    return true;\n                } else {\n                    throw new Error('No toke in response. ' + JSON.stringify(response.data));\n                }\n            } else {\n                throw new Error(response.status + ' - ' + JSON.stringify(response.data));\n            }\n        } catch (e) {\n            if (axios.isAxiosError(e)) {\n                const response = (e as AxiosError).response || {status: 0, data: 'Unknown failure', headers: ''};\n                throw new Error('Could not update token: ' + response.status + ' - ' + JSON.stringify(response.data));\n            } else {\n                this.log.error('Unexpected error during refresh: ' + e);\n                throw new Error('Could not update token: ' + e);\n            }\n        }\n    }\n\n    private async requestInfo(urlPart: string, method: Method = 'get', triedRefresh = false) : Promise<Record<string, any> | null | string> {\n        try {\n            const headers : Record<string, string> = {\n                Authorization: 'Bearer ' + this.accessToken,\n                Accept: 'application/json',\n                'Accept-Charset': 'utf-8',\n                'Accept-Encoding': 'gzip, deflate'\n            };\n            if (urlPart.includes('?')){\n                headers['Content-type'] = 'application/x-www-form-urlencoded';\n            }\n\n            const response = await axios.request({\n                url: apiPrefix + urlPart,\n                method,\n                responseType: method === 'get' ? 'json' : 'text',\n                headers\n            });\n\n            if (typeof response.data === 'string') {\n                return JSON.parse(response.data);\n            }\n            return response.data;\n        } catch (e: any | AxiosError) {\n            if (axios.isAxiosError(e)) {\n                const response = (e as AxiosError).response || {status: 0, data: 'Unknown failure', headers: ''};\n                if (response.status === 401 && !triedRefresh) {\n                    const refreshWorked = await this.doRefreshToken();\n                    if (refreshWorked) {\n                        return this.requestInfo(urlPart, method, true);\n                    }\n                    throw new Error('Could not update token: ' + response.status + ' - ' + JSON.stringify(response.data));\n                } else {\n                    throw new Error(`API Error ${response.status} while getting ${urlPart}: ${JSON.stringify(response.data)} - headers: ${JSON.stringify(response.headers)}`);\n                }\n            } else {\n                throw new Error('Unexpected error getting ' + urlPart + ': ' + e.stack);\n            }\n        }\n    }\n\n\n    static getLoginUrl(redirectUrl: string, state: string) : string {\n        //interop.ondilo.com/oauth2/authorize?client_id=customer_api&scope=api&redirect_uri=http://localhost:8081/oauth2_callbacks/ico-cloud.0/&response_type=code&state=ioBroker.ico-cloud1483502118005.6616\n        return `${authorizeBaseUrl}?client_id=${client_id}&scope=api&response_type=code&redirect_uri=${redirectUrl}&state=${state}`;\n    }\n\n    static async getToken(code: string, redirectUrl: string, log: any) : Promise<false | {accessToken?: string, refreshToken?: string}> {\n        log.debug('Sending post to get token');\n        const urlPart = tokenURL;\n        try {\n            const result = await axios.post(urlPart,\n                `code=${code}&grant_type=authorization_code&client_id=customer_api&redirect_uri=${redirectUrl}`,\n                {\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    responseType: 'json',\n                });\n            //log.debug(JSON.stringify(result.data));\n            if (result.status === 200) {\n                if (result.data && result.data.access_token) {\n                    return { accessToken: result.data.access_token, refreshToken: result.data.refresh_token };\n                } else {\n                    log.error('No token in response. ' + JSON.stringify(result.data));\n                }\n            } else {\n                log.error(result.status + ' - ' + JSON.stringify(result.data));\n            }\n        } catch (e: any | AxiosError) {\n            if (axios.isAxiosError(e)) {\n                const response = (e as AxiosError).response || {status: 0, data: 'Unknown failure', headers: ''};\n                log.error(`API Error ${response.status} while getting ${urlPart}: ${JSON.stringify(response.data)} - headers: ${JSON.stringify(response.headers)}`);\n            } else {\n                log.error('Unexpected error getting ' + urlPart + ': ' + e.stack);\n            }\n        }\n        return false;\n    }\n\n    //===========================================================================================================\n    // ========== User stuff:\n    //===========================================================================================================\n    async getUser() : Promise<{lastname: string, firstname: string, email: string}> {\n        const data = await this.requestInfo('user/info');\n        if (typeof data === 'string') {\n            return JSON.parse(data);\n        }\n        return <{lastname: string, firstname: string, email: string}> data;\n    }\n\n    // will return:\n    //     \"conductivity\": \"MICRO_SIEMENS_PER_CENTI_METER\",\n    //     \"hardness\": \"FRENCH_DEGREE\",\n    //     \"orp\": \"MILLI_VOLT\",\n    //     \"pressure\": \"HECTO_PASCAL\",\n    //     \"salt\": \"GRAM_PER_LITER\",\n    //     \"speed\": \"METER_PER_SECOND\",\n    //     \"temperature\": \"CELSIUS\",\n    //     \"volume\": \"CUBIC_METER\"\n    async getUnits() : Promise<{conductivity: string, hardness: string, orp: string, pressure: string, salt: string, speed: string, temperature: string, volume: string}> {\n        const data = await this.requestInfo('user/units');\n        return <{conductivity: string, hardness: string, orp: string, pressure: string, salt: string, speed: string, temperature: string, volume: string}> data;\n    }\n\n    // Result:\n    // [\n    //     {\n    //         \"id\": 234,\n    //         \"name\": \"John's Pool\",\n    //         \"type\": \"outdoor_inground_pool\",\n    //         \"volume\": 15,\n    //         \"disinfection\": {\n    //             \"primary\": \"chlorine\",\n    //             \"secondary\": {\n    //                 \"uv_sanitizer\": true,\n    //                 \"ozonator\": false\n    //             }\n    //         },\n    //         \"address\": {\n    //             \"street\": \"162 Avenue Robert Schuman\",\n    //             \"zipcode\": \"13760\",\n    //             \"city\": \"Saint-Cannat\",\n    //             \"country\": \"France\",\n    //             \"latitude\": 43.612282,\n    //             \"longitude\": 5.3179397\n    //         },\n    //         \"updated_at\": \"2019-11-27T23:00:21+0000\"\n    //     },\n    //     {\n    //         ...\n    //     }\n    // ]\n    async getPools() : Promise<Array<any> > {\n        const data = await this.requestInfo('pools');\n        console.log(data);\n        return <Array<any> > data;\n    }\n\n    async getDevice(id : string) : Promise<{uuid: string, serial_number: string, sw_version: string}> {\n        const data = await this.requestInfo(`pools/${id}/device`);\n        console.log(data);\n        return <{uuid: string, serial_number: string, sw_version: string}> data;\n    }\n\n    async getConfiguration(id: number): Promise<Configuration> {\n        const data = await this.requestInfo(`pools/${id}/configuration`);\n        return <Configuration> data;\n    }\n\n    //getShares...?\n\n\n    //===========================================================================================================\n    // ========== Measurements:\n    //===========================================================================================================\n\n    async getLastMeasures(id: number) : Promise<Array<Measure> > {\n        const data = (await this.requestInfo(`pools/${id}/lastmeasures?` +\n            'types[]=temperature&' +\n            'types[]=ph&' +\n            'types[]=orp&' +\n            'types[]=salt&' +\n            'types[]=tds&' +\n            'types[]=battery&' +\n            'types[]=rssi')) as Array<Measure>;\n        for (const measure of data) {\n            measure.value_time = new Date(measure.value_time);\n        }\n        return  data;\n    }\n\n    /**\n     * Get all measures of type for the last day / week / month\n     * @param id\n     * @param type\n     * @param period\n     */\n    async getMeasures(id: number, type: 'temperature' | 'ph' | 'orp' | 'salt' | 'tds' | 'battery' | 'rssi', period: 'day' | 'week' | 'month') : Promise<Array<Measure> > {\n        const data = (await this.requestInfo(`pools/${id}/measure?\n            type=${type}&\n            period=${period}`)) as Array<Measure>;\n        for (const measure of data) {\n            measure.value_time = new Date(measure.value_time);\n        }\n        return <Array<Measure> > data;\n    }\n\n    //===========================================================================================================\n    // ========== Recommendations:\n    //===========================================================================================================\n    async getRecommendations(id: number): Promise<Array<Recommendation> > {\n        const data = (await this.requestInfo(`pools/${id}/recommendations`)) as Array<Recommendation>;\n        for (const recommendation of data) {\n            recommendation.created_at = new Date(recommendation.created_at);\n            recommendation.updated_at = new Date(recommendation.updated_at);\n            recommendation.deadline = new Date(recommendation.deadline);\n        }\n        return <Array<Recommendation> > data;\n    }\n\n    async validateRecommendation(poolId: number, recommendationId: number): Promise<boolean> {\n        const response = await this.requestInfo(`pools/${poolId}/recommendations/${recommendationId}`, 'put');\n        return ['Done', 'done', 'DONE'].includes(<string> response);\n    }\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
